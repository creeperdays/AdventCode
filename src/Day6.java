import java.util.ArrayList;
import java.util.Arrays;

public class Day6 {

    public static int loops(String input) {
        locations[][] grid = toGrid(input);
        Coord first = findCurrent(input);


        int count = 0;

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                Coord c1 = new Coord(i, j);
                if (grid[i][j] != locations.OBSTRUCTION && !c1.equals(first)) {
                    ArrayList<Visited> v = new ArrayList<Visited>();
                    locations[][] grid1 = toGrid(input);
                    grid1[i][j] = locations.OBSTRUCTION;

                    if (isloop(grid1, first, v)) {
                        count = count + 1;
                    }

                }
            }
        }

        return count;
    }

    public static boolean isloop(locations[][] grid, Coord current, ArrayList<Visited> visited) {
        locations direction = grid[current.getX()][current.getY()];

        if (direction == locations.UP) {
            Coord newCoord = new Coord(current.getX() - 1, current.getY() );
            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX() - 1][current.getY()] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    Visited v = new Visited(newCoord, locations.UP);

                    if (!visited.contains(v)) {
                        visited.add(v);
                    } else {
                        return true;
                    }

                    while (outofBounds(grid, new Coord(x - 1, y)) && grid[x-1][y] != locations.OBSTRUCTION) {
                        x = x - 1;
                        Coord c = new Coord(x, y);
                        Visited c1 = new Visited(c, locations.UP);
                        if (!visited.contains(c1)) {
                            visited.add(c1);
                        } else {
                            return true;
                        }
                    }

                    grid[x][y] = locations.UP;

                    Coord c1 = new Coord(x, y);

                    return isloop(grid, c1, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);

                    return isloop(grid, current, visited);
                }
            } else {
                return false;
            }
        } else if (direction == locations.RIGHT) {
            Coord newCoord = new Coord(current.getX(), current.getY() + 1);
            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX()][current.getY()+1] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    Visited v = new Visited(newCoord, locations.RIGHT);

                    if (!visited.contains(v)) {
                        visited.add(v);
                    } else {
                        return true;
                    }

                    while (outofBounds(grid, new Coord(x, y+1)) && grid[x][y+1] != locations.OBSTRUCTION) {
                        y = y+1;

                        Coord c = new Coord(x, y);
                        Visited v1 = new Visited(c, locations.RIGHT);
                        if (!visited.contains(v1)) {
                            visited.add(v1);
                        } else {
                            return true;
                        }
                    }

                    grid[x][y] = locations.RIGHT;
                    Coord c = new Coord(x, y);

                    return isloop(grid, c, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);

                    return isloop(grid, current, visited);
                }
            } else {
                return false;
            }
        } else if (direction == locations.DOWN) {
            Coord newCoord = new Coord(current.getX() + 1, current.getY());
            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX() + 1][current.getY()] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    Visited v = new Visited(newCoord, locations.DOWN);

                    if (!visited.contains(v)) {
                        visited.add(v);
                    } else {
                        return true;
                    }

                    while (outofBounds(grid, new Coord(x+1, y)) && grid[x+1][y] != locations.OBSTRUCTION) {
                        x = x+1;

                        Coord c = new Coord(x, y);
                        Visited v1 = new Visited(c, locations.DOWN);
                        if (!visited.contains(v1)) {
                            visited.add(v1);
                        } else {
                            return true;
                        }
                    }

                    grid[x][y] = locations.DOWN;
                    Coord c = new Coord(x, y);

                    return isloop(grid, c, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);

                    return isloop(grid, current, visited);
                }
            } else {
                return false;
            }
        } else {
            Coord newCoord = new Coord(current.getX(), current.getY() - 1);

            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX()][current.getY() - 1] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    Visited v = new Visited(newCoord, direction);

                    if (!visited.contains(v)) {
                        visited.add(v);
                    } else {
                        return true;
                    }

                    while (outofBounds(grid, new Coord(x, y-1)) && grid[x][y-1] != locations.OBSTRUCTION) {
                        y = y-1;

                        Coord c = new Coord(x, y);
                        Visited v1 = new Visited(c, direction);
                        if (!visited.contains(v1)) {
                            visited.add(v1);
                        } else {
                            return true;
                        }
                    }

                    grid[x][y] = locations.LEFT;
                    Coord c = new Coord(x, y);

                    return isloop(grid, c, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);

                    return isloop(grid, current, visited);
                }
            } else {
                return false;
            }
        }
    }







    public static int distinctPoints(String input) {
        locations[][] grid = toGrid(input);
        Coord current = findCurrent(input);

        ArrayList<Coord> visited = new ArrayList<Coord>();
        visited.add(current);
        move(grid, current, visited);


        return visited.size();
    }

    public static void move(locations[][] grid, Coord current, ArrayList<Coord> visited) {
        locations direction = grid[current.getX()][current.getY()];

        if (direction == locations.UP) {
            Coord newCoord = new Coord(current.getX() - 1, current.getY() );
            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX() - 1][current.getY()] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    while (outofBounds(grid, new Coord(x - 1, y)) && grid[x-1][y] != locations.OBSTRUCTION) {
                        x = x - 1;
                        Coord c = new Coord(x, y);
                        if (!visited.contains(c)) {
                            visited.add(c);
                        }
                    }

                    grid[x][y] = locations.UP;
                    if (!visited.contains(newCoord)) {
                        visited.add(newCoord);
                    }

                    Coord c1 = new Coord(x, y);

                    move(grid, c1, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);
                    move(grid, current, visited);
                }

            }

        } else if (direction == locations.RIGHT) {
            Coord newCoord = new Coord(current.getX(), current.getY() + 1);

            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX()][current.getY()+1] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    while (outofBounds(grid, new Coord(x, y+1)) && grid[x][y+1] != locations.OBSTRUCTION) {
                        y = y+1;

                        Coord c = new Coord(x, y);
                        if (!visited.contains(c)) {
                            visited.add(c);
                        }
                    }

                    grid[x][y] = locations.RIGHT;

                    if (!visited.contains(newCoord)) {
                        visited.add(newCoord);
                    }

                    Coord c = new Coord(x, y);

                    move(grid, c, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);
                    move(grid, current, visited);
                }
            }
        } else if (direction == locations.DOWN) {
            Coord newCoord = new Coord(current.getX() + 1, current.getY());

            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX()+1][current.getY()] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    while (outofBounds(grid, new Coord(x+1, y)) && grid[x+1][y] != locations.OBSTRUCTION) {
                        x = x+1;

                        Coord c = new Coord(x, y);
                        if (!visited.contains(c)) {
                            visited.add(c);
                        }
                    }

                    grid[x][y] = locations.DOWN;

                    if (!visited.contains(newCoord)) {
                        visited.add(newCoord);
                    }

                    Coord c = new Coord(x, y);

                    move(grid, c, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);
                    move(grid, current, visited);
                }
            }
        } else if (direction == locations.LEFT) {
            Coord newCoord = new Coord(current.getX(), current.getY() - 1);

            if (outofBounds(grid, newCoord)) {
                if (grid[current.getX()][current.getY() - 1] != locations.OBSTRUCTION) {
                    grid[current.getX()][current.getY()] = locations.EMPTY;

                    int x = newCoord.getX();
                    int y = newCoord.getY();

                    while (outofBounds(grid, new Coord(x, y-1)) && grid[x][y-1] != locations.OBSTRUCTION) {
                        y = y-1;

                        Coord c = new Coord(x, y);
                        if (!visited.contains(c)) {
                            visited.add(c);
                        }
                    }

                    grid[x][y] = locations.LEFT;

                    if (!visited.contains(newCoord)) {
                        visited.add(newCoord);
                    }
                    Coord c = new Coord(x, y);

                    move(grid, c, visited);
                } else {
                    grid[current.getX()][current.getY()] = nextDirection(direction);
                    move(grid, current, visited);
                }
            }
        }


    }

    public static boolean outofBounds(locations[][] grid, Coord c) {
        int x = c.getX();
        int y = c.getY();

        return x >= 0 && x < grid.length && y >= 0 && y < grid[0].length;
    }

    public static locations nextDirection(locations current) {
        if (current == locations.UP) {
            return locations.RIGHT;
        } else if (current == locations.RIGHT) {
            return locations.DOWN;
        } else if (current == locations.DOWN) {
            return locations.LEFT;
        } else {
            return locations.UP;
        }
    }



    public static Coord findCurrent(String input) {
        String[] s1 = input.split("\n");

        for (int i = 0; i < s1.length; i++) {
            String s = s1[i];
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == '^') {
                    Coord c = new Coord(i, j);
                    return c;
                }
            }
        }

        return null;
    }

    public static locations[][] toGrid(String input) {
        String[] s1 = input.split("\n");
        locations[][] grid = new locations[s1.length][s1[0].length()];

        for (int i = 0; i < s1.length; i++) {
            String s = s1[i];
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == '.') {
                    grid[i][j] = locations.EMPTY;
                }
                if (s.charAt(j) == '#') {
                    grid[i][j] = locations.OBSTRUCTION;
                }
                if (s.charAt(j) == '^') {
                    grid[i][j] = locations.UP;
                }
            }
        }

        return grid;
    }

    public static class Visited {
        private Coord c;

        private locations l;

        public Visited(Coord c, locations l) {
            this.c = c;
            this.l = l;
        }

        public Coord getC() {
            return c;
        }

        public locations getL() {
            return l;
        }

        @Override
        public boolean equals(Object obj) {
            try {
                Visited v = (Visited) obj;

                return this.getL() == v.getL() && this.getC().equals(v.getC());
            } catch (ClassCastException e) {
                return false;
            }
        }
    }



    public static class Coord {
        private int x;

        private int y;

        public Coord(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        @Override
        public boolean equals(Object obj) {
            try {
                Coord c = (Coord) obj;
                return c.getX() == this.getX() && c.getY() == this.getY();
            } catch (ClassCastException e ) {
                return false;
            }
        }
    }

    public enum locations {
        EMPTY,
        UP,
        DOWN,
        LEFT,
        RIGHT,
        OBSTRUCTION;
    }

    public static void main(String[] args) {
        String input = "..........................#.#........................................#..........................................#.............#...\n" +
                "....................#...............................#.......#...............................#..........................#...#......\n" +
                ".....#.......#...................................................#..#....................##.........#...#...........#.....#..#.#..\n" +
                "............#...#....#..............##...#.#....#........................#...................................................#....\n" +
                "....#......##........................................................................#..#..##...................##.........#......\n" +
                ".............##.........#..##..............#...............#....................#..................#......#...................#...\n" +
                "...........#.....................#.......#.................#....#.#..............#...........#.........................#..........\n" +
                ".#............#..............................................................#........#................#........#.................\n" +
                "..........................#..#.......................................................#.........#..................................\n" +
                ".........#....#................#...........#...................##............#..........#.........................................\n" +
                "....#...................................#....#.........#..........#.......................#..............................#........\n" +
                ".............................#.....##.............................................................#..#...........................#\n" +
                "....#................#...#.#..........#.#....#..................#..........#......#.............................#.................\n" +
                "......................#............#......................................##................#..........#..#.............#.........\n" +
                "..#........#............#.....###....##...........................#..............................#.....#..........................\n" +
                ".....#...........#..#.........#...................#.#.................#........#............#.....#........#......................\n" +
                "..........................................................................................................................#.......\n" +
                "..#...................#.....................................................................#....................#................\n" +
                "...............#............................#....#..........#...................#............#...............#..#.................\n" +
                "................#...........................#...........................................#.........................#...............\n" +
                "..........#.......#.........................##.................................................#...................##..#..........\n" +
                ".#.........#...#..#............................................#........................#.......................................#.\n" +
                "........#...........###..................#...........#..............#.....................#................#......................\n" +
                ".............#....#............................#.#..............................#..#................................#.............\n" +
                "...#.....#..........#...........#..................................................#........#...........#..#..........##.....#....\n" +
                "...............................................................................#...................#........................##....\n" +
                "......#.#...........................#.................#.................................................................#.........\n" +
                "..................................#............................................................................#.#................\n" +
                "........................#.......#.....#..........#..#.............##.................#..............#............##...............\n" +
                "......#........................#........................................#......#..................................................\n" +
                "...............##.......#..............................................................................................#..........\n" +
                "....#...................................................................................#.........#..........#..............#.....\n" +
                ".....#.............#.........................#.........#........#................#.#.........................#..........#.........\n" +
                ".............#......##...........#................#...#.#.....#......................................#..........#.................\n" +
                "...........................#............#................#................#...........................#.....#.....................\n" +
                ".......#.................#..#..............#................................#....#........#.......#.............#....#....##......\n" +
                "........................................................#........................................................................#\n" +
                ".................#.........................................#.......#.......#......#...#.#.................##......................\n" +
                "..........#............#..............................................#........................................#..........#..#....\n" +
                "..............#......................................................#......#................................#....................\n" +
                "...#........#.............#.................#......#.......................#..............................##........#.............\n" +
                ".....................#............................................................#............#...............................#..\n" +
                "......#.....#..............................................................#...............#...#..................................\n" +
                ".......................................#..#.......#...#..............#.................................................#..........\n" +
                "...................................................................................................#........................#.....\n" +
                "....#.....#.......................................................#.....#......#...................#............#.................\n" +
                "..............#....#.....................#........................................##....#...#.....................................\n" +
                ".....#...............................................................#............#............................#..................\n" +
                "........................#..........................#..............................................................................\n" +
                "#..............#...........................................................................#......................................\n" +
                "...................................#...#....................................................................#.....................\n" +
                "................#......#.........#.................#...........................#..................................................\n" +
                "......#...#................#...............#..................................................#...................................\n" +
                ".......................#.............#..#....................#............#.......................................................\n" +
                ".....................#.#.....................................#................................##.............#.#..#..............#\n" +
                ".....................................#...#...........................#....................................................##...#..\n" +
                ".................#..#............#.............................#..#................................................##.............\n" +
                "...#...........................................#.................................................#.............#.............##...\n" +
                "..................#....#....#.#..........................#.............#................#............................#............\n" +
                ".........................#................#.#..#.#............^.........................................................#.........\n" +
                ".....#...............#............................................................................................................\n" +
                ".#.......................................................................................#...............#....#.............#.....\n" +
                "......#................................#............#............................................................#................\n" +
                ".#.....................#..............#.............#.......................#.....#....#.#.#...................#....#.............\n" +
                "..................................................................#........#............................#..#.#...............#....\n" +
                ".#.....................#......#........#.......#.................#.......................#..#.....................................\n" +
                "..............#..#..#.............................................#....................#......#...................................\n" +
                ".................##.#............................##..#...............................................................#....#.......\n" +
                "...........#..#........................#.#..........#.................##.....#...#.........................#.#...#............#...\n" +
                ".....................#..........#..#..............................................................................................\n" +
                ".......#...............................#..#.........#.....................................#......#...................#............\n" +
                "..............................##.#........#.......#..#.....#......................................................................\n" +
                "..................#......................#.....................................###...#............................##..............\n" +
                "...................................#...................................#...........................#....##..#.....................\n" +
                ".....................#.....#.#.........#.........................#.....#.......#..........#.......................#...............\n" +
                "...........#..................................................................................................#...................\n" +
                "......#............................#.............................#..........................................#.....##..............\n" +
                "...........................#...........................................................#.............................#..........#.\n" +
                "..........................................#..........................................#......#...............#.....................\n" +
                "..............##.........#........................................................................................................\n" +
                ".....................#............#..#......#..#......................................................................#...........\n" +
                "........#.........#.....................#.................................#...#.#....#....#......................#.#..............\n" +
                "......#...........#............................................................#..............#......................#............\n" +
                ".....#.....................#.....#.........#.............................#....#............................#......................\n" +
                "..#..............................................................................................................#...#............\n" +
                "..............#.......................#........#............................................#.......................#.............\n" +
                "........................................#....................................................................................##...\n" +
                ".......#..#.......#.................#.#.................#...........#............#........#.#.........#...........#.#..........#..\n" +
                ".....##.......................#.........................#.........................#...........#.........#.....#...........#.......\n" +
                "..........................#.....................#...............................#.............................#...................\n" +
                ".....#..........#.............#...#..........................#.#...................#...........................#......#...........\n" +
                "......................................#.......#.........#......................................#..................................\n" +
                "......#...#....................#................#...#.......#.............#............#...........#.....#........................\n" +
                "........................................#............#......................................................#............#........\n" +
                "..#.......#....#..........................................................................#......................##..#.......#....\n" +
                "................#...................................................#..........................................#..................\n" +
                "...........#........................................................................................#.............................\n" +
                "..................#........................................#.....#...........................#..................#.................\n" +
                "........#.......#.....#...........#.......................................................#.........#.............................\n" +
                ".............#.....#.#............................#...................................................................#...........\n" +
                "...............#...................................#...........................#.............#..#..................#..##..........\n" +
                ".#...............................#....#.....................#...................................#...................#...#.........\n" +
                "..................#..#.#..................................................................................................#.......\n" +
                ".........#.....#...#.........#........#...........................................#..................#.#.#......#.................\n" +
                ".........#......#.......................#........#.............................#...#................#...........................#.\n" +
                "...#.........................................................................................##........................#..........\n" +
                ".....................................#...........................................................#.#...#......#...............#...\n" +
                "#.....................#.........#.................................................#.....................................#.........\n" +
                "............##.............................#...............................................#......................................\n" +
                ".#.................#........................#.................................................................#.....#.............\n" +
                ".....#.......................#......................#.................#....#....................................................#.\n" +
                ".............................#..................................................................#.#...............................\n" +
                "........#.......#.....##..........................................#...................#.........#...........#...#...#...#.........\n" +
                "..........#.#...#.....................#............................................................##.........##..................\n" +
                "...................#..............##.....#...........#.#.......#................................................#...............#.\n" +
                "............................................................#....#.............#....##.......#...#...#................#...........\n" +
                "......#...............................#.........#...................#....#..............#.................#.......................\n" +
                "....................................#.....................#....#....#.................#...............#...........................\n" +
                ".................................#.............#.#...................................#..............#...#.....#.............#.....\n" +
                "......................#..................#.............#.................#................................................#.......\n" +
                ".....................##.......................#.............#...#........#..........#.....#............................##...#.....\n" +
                "..........................#.....................#...........#.....................................................#...............\n" +
                "................#.....................................................................................................#...........\n" +
                "........#......#.......................#....................................#................................#....................\n" +
                ".....................................#............................................................................................\n" +
                "........#..........#.........#.#................##................#...#..........................#.........#......##.......#......\n" +
                ".......#...................#................................#..#.......................#..............................#...........\n" +
                "............#.....................................#......#........................#..........#.............................#......\n" +
                "..#...........#...........#...................................#............#...#.....#......................................#.....\n" +
                "................................................................#...........#.......##.......#..........#............#............";

        //System.out.println(distinctPoints(input));

        String input1 = "....#.....\n" +
                ".........#\n" +
                "..........\n" +
                "..#.......\n" +
                ".......#..\n" +
                "..........\n" +
                ".#..^.....\n" +
                "........#.\n" +
                "#.........\n" +
                "......#...";

        System.out.println(loops(input));


    }
}
