import java.util.*;

public class Day16 {
    public static int shortest1(char[][] grid) {
        Coord start = findSource(grid);
        Coord end = findEnd(grid);



        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();

        int dist = 0;

        Place s = new Place(start, Direction.RIGHT);

        Pair p = new Pair(0, s);

        HashMap<Place, Integer> m = new HashMap<Place, Integer>();

        Map<Place, Integer> dists = new HashMap<Place, Integer>();

        Map<Place, Set<Place>> from = new HashMap<Place, Set<Place>>();

        pq.add(p);

        while (!pq.isEmpty()) {
            Pair w = pq.poll();

            Place o = w.getPlace();

            Coord curr = o.getPoint();

            if (curr.equals(end)) {
                dist = w.getDistance();
                //break;
            }


            HashMap<Place, Integer> map = adjacent(grid, curr, o.getDirection(), m);
            //shortest.add(o);
            for (Place p1 : map.keySet()) {
                Set<Place> set = new HashSet<Place>();
                if (w.getDistance() + map.get(p1) < dists.getOrDefault(p1, Integer.MAX_VALUE)) {
                    dists.put(p1, w.getDistance() + map.get(p1));
                    Pair n = new Pair(w.getDistance() + map.get(p1), p1);
                    pq.add(n);
                    Set<Place> set1 = new HashSet<Place>();
                    set1.add(o);
                    from.put(p1, set1);
                } else if (w.getDistance() + map.get(p1) == dists.getOrDefault(p1, Integer.MAX_VALUE)) {
                    Set<Place> s1 = from.getOrDefault(p1, set);
                    s1.add(o);
                }
            }
        }



        Stack<Place> stack = new Stack<Place>();
        Place f = new Place(end, Direction.RIGHT);
        stack.add(f);

        Set<Coord> nodes = new HashSet<Coord>();
        Set<Place> v = new HashSet<Place>();
        nodes.add(f.getPoint());
        v.add(f);

        while (!stack.isEmpty()) {
            Place some = stack.pop();

            Set<Place> empty = new HashSet<Place>();

            Set<Place> sp = from.getOrDefault(some, empty);

            for (Place point : sp) {
                if (!v.contains(point)) {
                    nodes.add(point.getPoint());
                    v.add(point);
                    stack.add(point);
                }
            }
        }



        return nodes.size();
    }

    public static int bestTiles(char[][] grid) {
        Coord intial = findSource(grid);

        Coord end = findEnd(grid);

        Place p = new Place(intial, Direction.RIGHT);

        ArrayList<Place> visited = new ArrayList<Place>();
        ArrayList<Integer> distance = new ArrayList<Integer>();

        visited.add(p);

        distance.add(0);

        Set<Coord> paths = new HashSet<Coord>();

        HashMap<Place, Integer> m = new HashMap<Place, Integer>();

        HashMap<Place, Integer> map = adjacent(grid, intial, Direction.RIGHT, m);

        for (Place k : map.keySet()) {
            if (!visited.contains(k)) {
                visited.add(k);
                distance.add(map.get(k));
                findPaths(grid, k, visited, paths, distance, end);

                visited.remove(k);
                distance.removeLast();
            }
        }





        return paths.size();
    }

    public static void findPaths(char[][] grid, Place current, ArrayList<Place> visited, Set<Coord> Paths, ArrayList<Integer> distance, Coord end) {
        Coord curr = current.getPoint();

        if (curr.equals(end)) {
            int sum = 0;

            for (int i = 0; i < distance.size(); i++) {
                sum = sum + distance.get(i);
            }
            //114476
            if (sum <= 114476) {

                for (Place p : visited) {
                    Coord c = p.getPoint();
                    Paths.add(c);
                }
            }
        }

        int sum = 0;

        for (int i = 0; i < distance.size(); i++) {
            sum = sum + distance.get(i);
        }


        if (sum <= 114476) {
            HashMap<Place, Integer> m = new HashMap<Place, Integer>();
            HashMap<Place, Integer> map = adjacent(grid, curr, current.getDirection(), m);

            ArrayList<Place> unvisited = new ArrayList<Place>();
            for (Place p : map.keySet()) {
                int sum1 = 0;

                for (int i = 0; i < distance.size(); i++) {
                    sum1 = sum1 + distance.get(i);
                }

                if (!visited.contains(p) && sum1 + map.get(p) <= 114476) {
                    unvisited.add(p);
                }
            }

            for (Place p : unvisited) {
                visited.add(p);
                distance.add(map.get(p));

                findPaths(grid, p, visited, Paths, distance, end);

                visited.remove(p);
                distance.removeLast();
            }
        }
    }

    public static int shortest(char[][] grid) {
        Coord start = findSource(grid);
        Coord end = findEnd(grid);



        PriorityQueue<Pair> pq = new PriorityQueue<Pair>();

        int dist = 0;

        Place s = new Place(start, Direction.RIGHT);

        Pair p = new Pair(0, s);

        ArrayList<Place> shortest = new ArrayList<Place>();

        pq.add(p);

        while (!pq.isEmpty()) {

            Pair w = pq.poll();

            Place o = w.getPlace();

            Coord curr = o.getPoint();


            if (curr.equals(end)) {
                dist = w.getDistance();
                break;
            }


            if (!shortest.contains(o)) {
                HashMap<Place, Integer> m = new HashMap<Place, Integer>();
                HashMap<Place, Integer> map = adjacent(grid, curr, o.getDirection(), m);


                shortest.add(o);

                for (Place p1 : map.keySet()) {

                    Coord c = p1.getPoint();

                    if (!shortest.contains(p1)) {
                        Place p2 = new Place(c, p1.getDirection());
                        Pair n = new Pair(w.getDistance() + map.get(p1), p2);
                        pq.add(n);
                    }
                }
            }

        }
        return dist;

    }

    //Provides the adjacent coordinates, with their respective point values, representing a turn straight etc ...
    public static HashMap<Place, Integer> adjacent(char[][] grid, Coord current, Direction d, HashMap<Place, Integer> map) {
        map.clear();

        if (d == Direction.UP) {

            if (grid[current.getX() - 1][current.getY()] != '#') {
                Coord up = new Coord(current.getX() - 1, current.getY());
                Place p = new Place(up, Direction.UP);
                map.put(p, 1);
            }

            Place p1 = new Place(current, Direction.RIGHT);
            map.put(p1, 1000);

            Place p2 = new Place(current, Direction.LEFT);
            map.put(p2, 1000);

            return map;

        } else if (d == Direction.RIGHT) {
            Place p1 = new Place(current, Direction.UP);
            map.put(p1, 1000);

            if (grid[current.getX()][current.getY() + 1] != '#') {
                Coord right = new Coord(current.getX(), current.getY() + 1);
                Place p = new Place(right, Direction.RIGHT);
                map.put(p, 1);
            }

            Place p2 = new Place(current, Direction.DOWN);
            map.put(p2, 1000);

            return map;
        } else if (d == Direction.DOWN) {

            Place p1 = new Place(current, Direction.RIGHT);

            map.put(p1, 1000);

            Place p2 = new Place(current, Direction.LEFT);

            map.put(p2, 1000);

            if (grid[current.getX() + 1][current.getY()] != '#') {
                Coord down = new Coord(current.getX() + 1, current.getY());
                Place p = new Place(down, Direction.DOWN);
                map.put(p, 1);
            }

            return map;
        } else { //Direction is left
            Place p1 = new Place(current, Direction.UP);

            map.put(p1, 1000);

            if (grid[current.getX()][current.getY() - 1] != '#') {
                Coord left = new Coord(current.getX(), current.getY() - 1);
                Place p = new Place(left, Direction.LEFT);
                map.put(p, 1);
            }

            Place p2 = new Place(current, Direction.DOWN);
            map.put(p2, 1000);

            return map;
        }
    }

    public static Coord findEnd(char[][] grid) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 'E') {
                    Coord c = new Coord(i, j);

                    return c;
                }
            }
        }

        return null;
    }

    public static Coord findSource(char[][] grid) {

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 'S') {
                    Coord c = new Coord(i, j);

                    return c;
                }
            }
        }

        return null;
    }



    public static char[][] parseinput(String input) {
        String[] s = input.split("\n");

        char[][] grid = new char[s.length][s[0].length()];

        for (int i = 0; i < grid.length; i++) {
            String s1 = s[i];
            for (int j = 0; j < s1.length(); j++) {
                char c = s1.charAt(j);
                grid[i][j] = c;
            }
        }

        return grid;
    }



    public static class Place {
        private Coord point;

        private Direction direction;

        public Place (Coord point, Direction direction) {
            this.point = point;
            this.direction = direction;
        }

        public Coord getPoint() {
            return point;
        }

        public Direction getDirection() {
            return direction;
        }

        @Override
        public boolean equals(Object obj) {
            try {
                Place p = (Place) obj;
                return this.getPoint().equals(p.getPoint()) && this.getDirection() == p.getDirection();
            } catch (ClassCastException e) {
                return false;
            }
        }

        @Override
        public int hashCode() {
           if (direction == Direction.UP) {
               return 31*(point.hashCode()) + 1;
           } else if (direction == Direction.RIGHT) {
               return 31*(point.hashCode()) + 2;
           } else if (direction == Direction.DOWN) {
               return 31*(point.hashCode()) + 3;
           } else {
               return 31*(point.hashCode()) + 4;
           }
        }
    }

    public enum Direction {
        UP,
        RIGHT,
        DOWN,
        LEFT;
    }

    public static class Pair implements Comparable<Pair> {
        private int distance;

        private Place place;

        public Pair(int distance, Place place) {
            this.distance = distance;
            this.place = place;
        }

        public Place getPlace() {
            return place;
        }

        public int getDistance() {
            return distance;
        }

        public void setDistance(int distance) {
            this.distance = distance;
        }



        @Override
        public int compareTo(Pair o) {
            if (this.getDistance() < o.getDistance()) {
                return -1;
            } else if (this.getDistance() == o.getDistance()) {
                return 0;
            } else  {
                return 1;
            }
        }


    }

    public static class Coord {
        private int x;

        private int y;

        public Coord(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        @Override
        public boolean equals(Object obj) {
            try {
                Coord c = (Coord) obj;
                return c.getX() == this.getX() && c.getY() == this.getY();

            } catch (ClassCastException e) {
                return false;
            }
        }


        @Override
        public String toString() {
            return "(" + x + "," + y+ ")";
        }

        @Override
        public int hashCode() {
            return 31*this.getX() + this.getY();
        }
    }


    public static void main(String[] args) {
        String input = "#############################################################################################################################################\n" +
                "#...#.#.....#.......#.......#...#.........#...#...........#.....#.#.......#.......#.....#...#.......#...#.#...............#...#.....#...#..E#\n" +
                "#.#.#.#.#.#.#.#.###.#.#.#####.#.#.#.#####.#.#.#.###.#####.###.#.#.#.#.#.#.#.###.#.#.###.#.###.#####.#.#.#.#.#.#.#########.#.#.#.###.#.###.#.#\n" +
                "#.#...#...#...#...#.#.#.......#...#.....#...#.#.#.#.#.........#...#.#...#.......#.#...#.#.#...#.....#.#...#...#.#.#.....#.................#.#\n" +
                "#.#.#.###.#######.###.#################.#.#####.#.#.#.###########.#.###.#.#######.###.#.#.#.#.#.#.###.#.#####.#.#.#.#.#######.#.#.#####.###.#\n" +
                "#.#.#...#...#...#.....#...............#.#.#...#...#.#.#.........#.#.#...#.......#...#.#.#.#.#.......#.#.#.....#.#.#...................#.#...#\n" +
                "#.#.#.###.#.#.#.#######.#######.###.#.#.###.#.###.#.###.#######.###.#.#.###.###.###.#.#.#.#.#####.#.#.###.###.#.#.#.#######.#####.#.#.#.#.#.#\n" +
                "#.#...#.....#.#.........#.....#...#.#.#...#.#.....#.....#.....#.....#.......#...#.#...#.#.#...#.....#.............#.#.#...#.....#.#.#.......#\n" +
                "#.#.###.#####.#####.###.#.###.#####.#.###.#.#################.#.#######.#####.###.#####.#.###.###.#.#.#.###.#.#.#.#.#.#.#.#####.#.#.#.#.#.###\n" +
                "#.#.....#.........#.....#.#.#.......#...#...#.......................#.....#...#.......#.#...#.....#.#.......#.#.#.....#.#...#...#...#.#.#...#\n" +
                "#.#.#########.###.#.###.#.#.###########.#####.###.#################.###.#.#.###.#######.###.#####.#.###.#####.#.#######.###.#.#######.#####.#\n" +
                "#.#.#...#...#...#...#...#.#...#.......#...#...#.....#...#.........#...#.#.#.#...#.............#...#...#.....................#.......#.......#\n" +
                "#.#.#.#.#.#.#########.#.#.#.#.#.###.#####.###.#.###.#.#.#.#######.###.#.#.#.#.#.#.#############.#.###.#.#.###.#.#.#########.#.###.#.#######.#\n" +
                "#.#.#.....#...#.......#...#.#...#...#.....#...#.#.....#...#...#.....#.....#.#.#.#.#.....#.......#...#.#.............#...#...#.#.#.#.#.....#.#\n" +
                "#.#.#.#######.#.#####.#.#####.###.#.#.#####.###.#.#########.#.#.#######.###.#.#.#.###.#.#.#######.###.#.#.#######.#.#.###.###.#.#.#.###.#.#.#\n" +
                "#...#.......#...#.....#.....#...#.#.#.....#...#.#.#...#...#.#.#.........#...#.#.#.#...#.#.....#.#...#.#.#.........#...#...#.................#\n" +
                "#.#########.#####.#.#.#.###.#####.#######.###.#.###.#.#.#.#.#.#.#########.###.###.#.###.#####.#.#.#.#.#.#########.###.#.###.###.#.#######.###\n" +
                "#.#...#.....#...#.#.#...#.#.#...#.......#...........#...#...#.#...#.....#.#.....#.#.#.....#...#.#.#.......#.....#.......#...#.............#.#\n" +
                "#.#.#.#.#####.###.#.#####.#.#.#.#######.#######.#.###########.###.#.###.#.#####.#.#.#.#####.###.#.#######.###.#########.#.###.#####.#.###.#.#\n" +
                "#...#...#...#.....#.#.....#...#.......#.....#...#...........#...#...#.#.#.....#...#.#.#.....#...#.#.....#.#.............#.....#...#.#...#...#\n" +
                "#.#######.#.#.#####.#.#.#####.#.#####.#####.#.###.#########.###.#####.#.#####.#.###.#.#.#####.###.#.###.#.#.#.#.#############.#.#.#.#.#.#.#.#\n" +
                "#.#.......#.#.....#.#.#.#.....#...#.#.......#...#.#.......#...#.#.....#...#.#.#...#.#.#...#...#.......#.#...#.#.......#...#...#.#...#.#...#.#\n" +
                "###.#######.#######.#.#.#.#####.#.#.#######.###.#.#.#.###.###.#.#.###.###.#.#.###.#.#####.#.###.###.#.#.#############.###.#.###.###.#.###.#.#\n" +
                "#...#.....#.....#...#.#.#.....#.#.#...#...#...#.#.#.#...#.#...#...#.#...#.....#.....#.....#...#.....#.#.#...#...#.....#...#.#...#...#...#...#\n" +
                "#.#####.#######.#.#.#.#######.#.#.#.#.#.#.#.###.#.###.#.###.#.#.###.#.###.###.#######.#####.#.###.#.#.#.#.#.#.#.#.#####.###.#.###.#####.###.#\n" +
                "#.#...#.....#...#...#.......#.#.#.#.#.#.#...#...#...#.#...#.#...#...#.....#...........#.....#.#...#.#.#...#...#.#...#...#...#...#.......#...#\n" +
                "#.#.#.###.###.###.#.#.#####.#.#.#.#.#.#.#####.#.###.#.###.#.#.###.#.#######.###.#############.#.#####.#########.#.#.#.#.#.#####.#####.###.###\n" +
                "#.#.#...#...#...#.#.#.#...#...#.#.#.#.#...........#.#...#...#...#.#...#...#...#...#.....#...#.#...#...#.#.....#.#.#.#.#...#...#...#...#...#.#\n" +
                "#.#.###.#.#.###.#.#.###.#.#.#.#.#.###.###.###.#####.###.#######.#.#####.#.###.###.#.###.#.#.#.###.#.###.#.#.#.#.###.#.#######.###.#####.###.#\n" +
                "#.#.#...#.#...#.#.#...#.#.#.....#...#.....#...#.....#.#...#...#.#.#.....#.....#...#.#.#...#...#...#.#.....#.#.#...#...#.....#...#.......#...#\n" +
                "#.#.#.#####.#.#.#####.#.#.#.#######.#######.###.###.#.###.###.#.#.#.#.#########.#.#.#.#######.#.###.###.###.#####.#.#.#.###.###.#########.#.#\n" +
                "#...#.#.....#.#.....#...#.#.#.....#.......#.#...#.......#...#.....#.#.#.........#...#.......#.#...#...#...#.......#.#...#.......#...#.....#.#\n" +
                "#.###.###.#.###.###.#.#.#.#.#.#.#.#######.#.#.#######.#.###.#######.#.#.#########.#.#.#####.#.###.###.###.###.#####.#.#########.#.#.#####.#.#\n" +
                "#...#.#...#.#.......#.#.#.#.#.#.#.......#.#.#...#...#.#.#...........#.#.....#...#.#.#.#...#.....#...#.......#.......#.#...#.#...#.#.#.....#.#\n" +
                "#####.#.#####.#######.#.#.#.###.#########.#.#.#.#.#.#.#.#.###########.#.#.#.#.#.#.#.###.#.#########.###.###.#.###.#.#.#.#.#.#.###.#.#.#####.#\n" +
                "#...#.#.....#.....#.....#.#...#.........#.......#.#...#.#.#...#.....#.....#.#.#...#.#...#.#.......#...#...#.#...#.#.#.#.#.#.....#.#...#...#.#\n" +
                "#.#.#.#.###.#####.#######.###.#.#.#####.#####.###.###.###.#.#.###.#####.###.#.#####.#.###.#.#####.###.###.#.###.#.#.###.#.#####.#.#####.###.#\n" +
                "#.#...#...#...#...#.......#.#.#...#...#.....#...#...#.#...#.#.#...#.........#.....#.....#.......#...#.#...#.#...#.#.....#...#...#...#.#.....#\n" +
                "#.#########.#.#.###.#####.#.#.###.###.###.#.###.###.###.###.#.#.###.#####.#########.###.###########.#.#.#.#.#.###.#########.#.#####.#.#.#####\n" +
                "#.............#...#.....#...#...#...#...#.....#.........#...#.#.....#.........#...#.......#.......#.#.#...#.#...#...#.......#...............#\n" +
                "#.#.###.#########.###.#.###.###.###.###.#.###.###.#####.#.###.#.#######.#.###.#.#.#########.#####.#.#.#####.###.#####.#.#############.###.#.#\n" +
                "#.#...#.........#...#.#...#...#.#.......#...#...#.........#.#.#...#.....#.....#.#...........#.#...#.#.....#.#...#.......#.......#.....#.#...#\n" +
                "#####.#.#######.###.#.###.#####.###.###.###.###############.#.###.###.###.#####.#############.#.###.#####.#.#.###.###.###.#####.###.#.#.###.#\n" +
                "#.....#...#...#...#.#...#.....#.......#.#...#.........#.....#.......#...#.....................#.#.....#.#...#.#...#...#...#...#.#...#.....#.#\n" +
                "#.#######.#.#.###.#.###.#####.#######.###.###.###.###.#####.#.#####.###.#############.#####.###.#.#.#.#.#####.#.#.#.###.###.#.#.#.#######.#.#\n" +
                "#.#...#...#.#...#...#...#.#...#.....#.#...#...#...#...#.....#.....#.....#...#.........#...#.#...#.#.#...#.#...#.#.#...#.....#.#.#.....#...#.#\n" +
                "#.#.###.###.###.#####.###.#.#.#.#####.#.###.###.###.#.#.###.#####.#####.#.###.#.#####.#.#.#.#.###.#.###.#.#.###.#.#########.###.#.###.#.###.#\n" +
                "#.#...#...#...#.....#.....#.#...#.............#.#...#...#...#.#...#...#...#...#.#...#...#...#.#.#.#...#...#...#.#...........#...#...#.......#\n" +
                "#.#.#.###.###.#.#######.###.###.#.#########.#.#.#.#.#.###.#.#.#.###.#####.#.###.#.#.#########.#.#.###.#######.#.#############.#####.###.#####\n" +
                "#.#.#...#...#.#.........#...#...#.#.......#...#...#.#...#.#.#.#.#.....#...#...#...#.#.......#.#.....#...#...#.#.........#.....#.....#.......#\n" +
                "#.#.#.#####.#.#######.###.#######.#.#####.###.###.#.###.#.#.#.#.#####.#.#####.#####.#.#####.#.#.###.###.#.#.#.###########.#####.#####.#.###.#\n" +
                "#.#.............#...#.#...........#.#.....#...#...#...#.#...#.#.....#.#.#...#...#.#...#...#...#...#.#.#.#.#.#.#.......#...#...#.#.........#.#\n" +
                "#.###.#.#####.###.#.###.###.#######.#.#######.#.#####.#.#.###.#####.#.#.#.#####.#.###.###.#######.#.#.#.#.#.#.#.#####.#.###.#.#.#.###.#.#.#.#\n" +
                "#...#...#...#.#...#...#.#...#.......#...#...#.#.....#.#.#.........#.......#.....#.#...........#...#...#...#...#...#.#...#...#.#.#...#...#.#.#\n" +
                "#.#.#.###.#.###.###.#.#.#.###.#########.#.#.###.###.#.#.###########.#####.#.###.#.#.#.#######.#.#####.###########.#.#######.#.#.#######.#.#.#\n" +
                "#.#.............#.....#.#.....#.......#...#...#.#...#...#...#.....#.....#.#.#...#...#.....#...#.#.....#...#...............#.#.#.......#.#...#\n" +
                "#.#.#.#.###.#.###.#####.#.#.###.#####.#######.###.#.#####.#.#.###.#####.###.###.#.#######.#.###.#.#####.#.#.###########.#.###.#######.#.###.#\n" +
                "#.#.#...#...#.#.#.#.......#.#...#.......#...#.....#.#...#.#...#.#.#...#.#...#...#.......#.#.....#.......#.#...#.......#.#.....#.....#.......#\n" +
                "#.#.#.###.###.#.#.#####.###.#.###.#.###.#.#######.###.#.#.#####.#.#.#.#.#.###.###.#####.#.#############.#.#.#.#.#.###.#.#.#####.#.#####.#.#.#\n" +
                "#.#...#.......#.#.#...#.....#.#...#...#.#.........#...#...#.....#...#...#.#.......#...#.#...#...........#.#.#.#.#.#...#.#.#.................#\n" +
                "#.###.#########.#.#.#.#####.#.#.###.###.#.#########.###########.#.#####.#.#.#######.#.#.###.#.#######.###.###.#.#.#.###.###.#######.#.#.#####\n" +
                "#.......#.......#...#.....#.#.#.#...#...#...#...#...#...........#.....#.#.#.#.......#...#.#...#.....#...#.....#.#.#...#...#.................#\n" +
                "#.#.#.#.###.#.#######.###.###.#.#.###.#####.#.###.###.#########.#.#####.#.#.#.#.#######.#.#####.#.#.###.#########.#.#.###.#.###.#.#########.#\n" +
                "#.#...#.....#.......#...#.....#.#.....#.......#...#...#...........#.....#.#.#.#.#.......#.........#...#...........#.#.....#.#...#.......#...#\n" +
                "#.###.###.#.#####.#.#.#.#######.#######.#######.###.###.###########.#####.#.###.#####.###.#########.###########.###.#####.#.#.#######.#.#.###\n" +
                "#...#.#...#.#...#.#.#.#.......#...#.....#.....#.#...#...........#.......#.#...#.#...#.....#.......#.#...........#.......#.#.#...#...#.#.#.#.#\n" +
                "###.#.#.###.#.###.#.#####.#######.#######.###.#.#.#.#########.###.#######.###.#.#.#.#####.#.#####.#.#.###############.###.#.###.###.#.###.#.#\n" +
                "#.#...............#.#...#.......#.......#...#...#.#...#.....#.....#.#...#...#...#.#...#.#.#...#.#.#.#.#.....#.......#.#...#...#...#.#...#...#\n" +
                "#.#.#.###.#.###.###.#.#.#.###.#.#######.###.###.#.###.#.###.#.#####.#.#.###.#####.###.#.#.###.#.#.###.#.#.#.#####.#.#.#.###.#.#.#.#.###.###.#\n" +
                "#.....#...#.#...#.....#.#.#...#.......#.#...#.....#...#...#.....#...#.#...#.#.....#...#...#...#.#.#...#.........#.#...#...#.#...#...#.#.....#\n" +
                "#######.#####.#########.###.#########.#.#.###.#####.###.#.#####.#.###.###.#.#.#####.###.###.###.#.#.#####.#####.#.###.###.#.###.###.#.#######\n" +
                "#.....#.#.....#.....#.#.....#.....#...#...#...#.....#...#.....#...#...#...#.......#.#.....#.#.....#.#.....#...#.#...#...#...#.#.#...#...#...#\n" +
                "#.#.#.#.#.#####.###.#.###.#.#.###.#########.###.###.#.###.###.###.#.#######.###.###.#.#####.#.#####.#.#####.#.#.###.###.#####.#.#.#####.#.#.#\n" +
                "#...#...#.#...#.#.#.#.....#.#.#.#...#.....#...#.#...#...#.#...#...#.#.........#.#...#.#.....#...#...#.#...#.#.......#...#.....#.#.#...#...#.#\n" +
                "###.#.#.#.#.#.#.#.#.###.###.#.#.###.#.#.###.###.#.###.###.#.###.###.#.#.#.#.#.###.#####.#######.###.#.#.#.#.#.#########.#.#####.#.#.#.#####.#\n" +
                "#...........#.....#...#.....#...#...#.#.....#.....#.......#.#...#...#.#.#.#.#.#...#.....#.......#...#...#.#.#.........#.#.....#.#.#.#.......#\n" +
                "#.#.#.#.#########.###.#.#######.#.###.#######.###.#.###.###.###.#.###.#.###.#.#.#####.###.#######.###.###.#.#####.###.#.###.#.#.#.#.#.#####.#\n" +
                "#.#...#.....#.....#.#.#.#.....#.#.#...#.......#...#.#.#.#.#...#.#...#...#...#...#.....#...#.....#.#.#...#.#.#.......#.#...#.#.#.#...#.......#\n" +
                "#.#.#.#.#.#.###.#.#.#.###.###.#.#.#.###.###.#.#.###.#.#.#.###.#.###.#.#.#.#########.###.###.#.#.#.#.#.#.#.#.#####.#.#.#.#.###.#.#####.#.#####\n" +
                "#.#.......#.....#...#.......#.#.#...#...#.....#...#...#...#.#.......#.#...#.........#...#...#.#...#...#...#...#...#.#.#.#.....#.#.....#.....#\n" +
                "#.#.#.#.###.#######.#########.#.#####.#.#######.###.#####.#.#########.###########.###.#######.#####.###.#####.#.###.#.#.###.###.#.###.#.#.#.#\n" +
                "#.....#.....#.....#...#.....#.....#.#.#.............#.....#.......#.......#.......#.#.#.......#...#.#.#.....#.#.#...#.#...#.#...#...#.#.#.#.#\n" +
                "#.#.#.#.#####.###.#####.###.#####.#.#.#.#.###########.#####.#####.#####.#.#.#######.#.#.#######.#.#.#.#####.#.#.#####.#.###.#.#####.#.#.#.#.#\n" +
                "#...#.#.....#.#.#.#.....#.....#.....#.#.#...#.......#.....#.....#.....#.#.#...#...#.#.#.#.......#.#.#.....#.#...#.....#.#...#.....#...#...#.#\n" +
                "#.#.#.#.###.#.#.#.#.#########.#######.#####.#.#.#.#######.#.#.#.#####.###.#.#.#.#.#.#.#.#.#########.#.###.#.###.#.#####.#.#######.#.#.#####.#\n" +
                "#...#.#.....#.#...#.#.......#.......#.....#...#...#.........#.#.....#...#.#.#...#.#.#.#.#.........#...#.#.#...#.#.#.............#.#.#...#...#\n" +
                "#####.#.#####.#.###.#.#####.#######.#####.#####.###.#########.#.###.###.#.#.#####.#.#.#.#.#######.#####.#.###.#.#.###.###########.#.#.###.###\n" +
                "#...#.#.#...#.#.#.......#...#.#...#...........#...#.......#...#.#...#...#.#...#...#.#...#.#.....#.......#.#.#...#...#.#...........#.#...#.#.#\n" +
                "#.#.#.#.#.###.#.#########.###.#.#.#.#############.###.###.#.###.#.###.###.###.#.###.#####.#.#####.#.#.###.#.#######.###.###########.#.#.#.#.#\n" +
                "#.#...#.#.#...#.#.........#.#...#...#...........#.#...#...#.#...#.........#...#.#...#...#.#...#...#.#...#.#.#.......#...#...........#.#.#.#.#\n" +
                "#.###.#.#.#.###.#.#########.#.#######.#####.###.#.#.#.#.###.#######.#######.###.#.#.#.#.#.###.#.#####.#.#.#.#.#######.#.#.#####.#.#.#.#.#.#.#\n" +
                "#...#.....#.#.....#.....#.............#...#.#...#...#.#.#.#.........#.......#...#.#...#.#.#...#...#...#.....#...#...#.#...#...#...#...#.#...#\n" +
                "#.#.#.#.###.#######.###.#####.#####.###.#.#.#.###.#####.#.#.#######.#######.#.#########.#.#.#####.#.###########.#.#.#.#.#.#.#####.###.#.###.#\n" +
                "#.#.......#.........#.#...#...#.....#...#...#.....#.....#.#.#.....#.#.....#.#.......#...#.#.#.....#.#.........#...#.#.#.#.#...#.....#.#...#.#\n" +
                "#.#######.#.#########.###.#.#.#.#####.###.#######.#.#####.#.#.###.#.#.#.#.#.#######.#.###.#.#.###.#.#.#######.###.#.#.#.#.#.#.#.#####.#.###.#\n" +
                "#.......#.#.......#...#.#.....#.......#...#.....#.#.#.#.....#.#...#.....#.#.#.....#.#.......#...#.#.#.#.....#...#.#.#.#...#.#.#...#...#.....#\n" +
                "###.#####.#######.#.#.#.#####.#.###########.###.###.#.#.#####.###.#######.#.#.###.#.#######.###.###.#.#.#######.###.#.#.#.#.#.#.###.#####.#.#\n" +
                "#...#.....#.......#.#.....#...#.#...........#.#.#...#...#...#...#.........#.#...#.#.#...#...#...#...#.#.......#.....#.#.#.#.#...#...#...#.#.#\n" +
                "#.###.#####.#.#####.#####.#.###.#.###.#######.#.#.#######.#.###.###########.###.#.#.#.#.###.#.#.#.###.#######.#.#####.#.#.#####.#.#####.#.#.#\n" +
                "#...#.#.....#...#...#...#.#.#...#.....#.......#.#.#.......#.....#.#.......#...#.#.#...#...#.#.#.#...#.#.....#...#.....#.#.#...#.#.......#.#.#\n" +
                "###.#.#.###.###.#.#.#.#.###.#.#######.#####.#.#.#.#.#.#.#########.#.###.#####.###.#######.#.#.#.#.###.#.###.#####.#######.#.#.#####.#####.#.#\n" +
                "#.#.#.#.#...#...#.#...#...#.....#...#.#.....#.#.....#.#.#.....#.......#...........#.....#.#...#...#...#.#.#...#...#.....#.#.#.....#.#.....#.#\n" +
                "#.#.#.#.#.###.###########.#####.###.#.#.#####.#######.###.###.#.#################.###.###.###.#####.###.#.###.#.###.###.#.#.#####.#.#.#.###.#\n" +
                "#...#.#.#...#...#.....#...#...#...#.#.#...#.#.......#.#.....#.#.#...#.......#...#...#...#...#.....#...#.#.......#...#...#...#...#...#.#.#...#\n" +
                "#####.#.###.###.#.###.#.###.#.###.#.#.###.#.#######.#.#.#####.#.#.#.#.#####.#.#.###.###.###.#####.###.#.###.#####.#.###.#.###.#.#####.###.###\n" +
                "#.....#...#...#.#...#...#...#.#.#.#.#.....#.......#.#...#.#...#...#.#.#.....#.#...........#.#...#...#.#...#.......#...#.#.#...#.....#...#.#.#\n" +
                "#.#######.#.###.###.#####.###.#.#.#.###########.#.#.#.###.#.#######.#.#.#################.#.#.#.#####.###.#.#########.#.#.#.#####.#####.#.#.#\n" +
                "#.......#.#.........#.....#...#.......#.......#.#.#.#.....#.....#...#.#.#.............#...#...#.....#.....#.#.....#...#.#...#.....#.....#.#.#\n" +
                "#.#####.#.###########.#.#.#.#####.#####.#.###.#.#.#.#######.###.#####.#.#.###########.#.#######.###.#.#####.#.###.#.###.#####.#####.#####.#.#\n" +
                "#.#...#.#.......#.....#...#.....#.#.....#...#.#.#.#...#...#...#.#.....#.#.#.......#...#...#...#.#...#...#...#.#...#...#...#.......#...#.....#\n" +
                "#.#.#.#.#######.#.#############.###.#######.#.#.#.###.#.#.#####.#.#####.#.#.#.###.#.###.###.#.###.###.#.#####.#.#####.###.###########.#.###.#\n" +
                "#...#.#...#.....#.....#.......#.....#.......#.......#...#.#.....#.#...#.....#...#.#...#.#...#.....#.....#.....#.#...#.#.........#.....#...#.#\n" +
                "#####.###.###.#######.#.###.#.#######.###.#######.#.#####.#.#####.#.###.#######.#.###.#.#.###########.###.#####.#.#.#.#########.#.#.#.###.#.#\n" +
                "#...#...#...#.#.....#.#.#...#...#.....#...#...#...#.#...#.#.#.....#.............#...#.#.#...........#.....#...#.....#.....#.....#...#.#.#...#\n" +
                "#.#.###.###.###.###.#.###.#####.#.#####.#.#.#.#.#.###.#.#.#.###.###.#####.###########.#############.#########.#####.#.#.#.#.#.#.###.#.#.###.#\n" +
                "#.#...#.#.#.......#.#.....#.....#.....#.#.#.#...#...#.#.#...#...#.....#.#.#.......#...#.......#.....#.............#.#...#.#.#...#...#.....#.#\n" +
                "#.#####.#.#######.#.#######.#####.###.#.#.#.#######.#.#.#####.#######.#.#.#.#####.#.###.#####.#.#####.#####.#######.#.#.#.#.#.#.#.#.#####.#.#\n" +
                "#.......#...#...#.#.......#.....#.#.....#.#...........#.............#...#.....#.#...#.#...#...#.....#.....#.#...#...#...#.#.#.#.#.#.......#.#\n" +
                "#.#######.#.#.#.#####.#.#######.#.#.#.#.#########.#####.#.#####.###.#.#######.#.#####.#.#.#.###.###.#.###.###.#.#.#######.#.#.#.#.#.#######.#\n" +
                "#.#.......#.#.#.....#.......#.....#...#.........#.#.#...#.#.........#.......#.#.....#...#.#.#.....#.#...#.....#.#.#.......#.#.....#.#...#...#\n" +
                "#.#.#######.#.#####.#######.#.###.#.#########.#.#.#.#.###.#.###########.###.#.#.###.#####.#.#######.#.#########.#.#.#######.#####.#.#.###.###\n" +
                "#.#.......#.#.#.#...#...#...#...#.#.....#.....#.#...#.#.....#...........#.#.#...#.......#.#...#.....#.#.......#.#...#...#...#.....#...#...#.#\n" +
                "#.#########.#.#.#.###.#.#.#####.###.###.#.#.#.#####.#.#.#####.#########.#.#.###########.#.###.#.#####.#.#####.#.#####.###.###.#####.###.###.#\n" +
                "#.#.........#.#.#...#.#.#.#...#...#.....#.#...#.....#.#.....#.#...........#.........#.#.#.#.#...#...#.#.....#...#...........#.#...#.....#...#\n" +
                "#.#.#######.#.#.###.#.#.#.#.#.###.###.#.#.#####.#####.#.###.#.#.#########.#########.#.#.#.#.#####.###.#####.###.#.###.#####.#.#.#.#.#####.#.#\n" +
                "#...#...#...#.#.......#.#.#.#.....#...#.#.....#...#...#.#.#.#.#.........#...#.......#...#.#.#.........#...#...#...#...#...#...#.#...#.....#.#\n" +
                "#####.#.#.###.#.#######.#.#.#######.###.#####.#.#.#.###.#.#.#.#####.#######.#.#######.###.#.#.#########.#.###.###.#.###.#.#.#.#.###.#.#####.#\n" +
                "#.#...#.#.#...#.#...#.#...#.#...#.....#.....#.#.#.......................#...#.#...#...#...#...#.........#...#.....#.#...#.#...#...#...#...#.#\n" +
                "#.#.###.#.#.#####.#.#.###.#.#.#.#####.###.#.#.#.#.#.#.###.#####.#.###.#.#.###.#.###.###.#####.#.###.#######.#.###.#.#.###.#######.#.###.###.#\n" +
                "#.#...#...#.#.....#.#...#.#...#...#...#.#.....................#.....#.#.#...#.#.#...#...#...#...#...#...#...#.......#.#.#.........#...#.#...#\n" +
                "#.###.#.###.#.#####.#.###.#######.#.###.#.###.###.#.###.#.###.#######.#.###.#.#.#.###.###.#.#####.###.#.#.#######.#.#.#.#######.###.#.#.#.###\n" +
                "#...#...#...#.#.#...#...#.......#.#.....#.......#.#...#...#...................#.....#...#.#.............................#.........#...#.#...#\n" +
                "###.#.#.#.###.#.#.#####.#######.#.#########.###.#.###.#####.###.###.#####.#.#.###.#.###.#.#########.#.#####.#####.#.###.###.#####.#.###.###.#\n" +
                "#...#.#.#.....#.#.....#.....#...#.....#...#.#...#.#.......#...#.#...#...#.#.#.....#.....#.#.....#.....................#...#.#...#...#.....#.#\n" +
                "#.###.#.#######.#####.#####.#.#######.#.#.#.#####.#######.###.#.###.#.#.#.#.#####.#######.#.###.#.#.###.#####.#.#.###.###.#.###.#####.###.#.#\n" +
                "#.#...#...........#.#.....#.#.#...#...#.#.#...#...#.....#...#.#...#...#.#...#.....................#...#...#...#.....#.#...#...#.....#.#.#...#\n" +
                "#.#.###.#####.###.#.#####.#.#.#.#.#.###.#.###.#.###.###.#####.###.#.###.###.#.###.#.#.#.#.###.#.#.###.###.###.###.###.#.###.#.#.###.#.#.#####\n" +
                "#.#.....#.......#.....#.#.....#.#.#.#...#.....#.#...#.#.....#...#.#.#.#.#...#.....#...#.#...#.#.#.#.........................#.#...#.#...#...#\n" +
                "#.#######.#.#.#######.#.#.#####.#.#.###.#####.#.#.###.#####.###.#.#.#.#.#.#####.#.#####.###.#.#.#.#.###.###.#####.#######.###.#.#.#####.###.#\n" +
                "#S........#.............#.......#.......#.....#...........#.......#...#.........#.....#.......#...#.......#...................#.#...........#\n" +
                "#############################################################################################################################################";

        String input1 = "###############\n" +
                "#.......#....E#\n" +
                "#.#.###.#.###.#\n" +
                "#.....#.#...#.#\n" +
                "#.###.#####.#.#\n" +
                "#.#.#.......#.#\n" +
                "#.#.#####.###.#\n" +
                "#...........#.#\n" +
                "###.#.#####.#.#\n" +
                "#...#.....#.#.#\n" +
                "#.#.#.###.#.#.#\n" +
                "#.....#...#.#.#\n" +
                "#.###.#.#.#.#.#\n" +
                "#S..#.....#...#\n" +
                "###############";

        char[][] grid = parseinput(input);



        System.out.println(shortest1(grid));

    }

}
